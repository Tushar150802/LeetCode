class MyStack {
    LinkedList<Integer> q1;
    LinkedList<Integer> q2;
    int top;
    public MyStack() {
        q1=new LinkedList<Integer>();
        q2=new LinkedList<Integer>();
    }
    
    public void push(int x) {
        q1.add(x);
        top=x;
    }
    
    public int pop() {
        while(q1.size()>1)
        {
            top=q1.remove();
            q2.add(top);
        }
        int y=q1.peek();
        q1.remove();
        LinkedList<Integer>temp=q1;
        q1=q2;
        q2=temp;
        return y;
    }
    
    public int top() {
        return q1.getLast();
    }
    
    public boolean empty() {
        if(q1.isEmpty()) {
            return true;
        }
        return false;
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------
#Same method but using queue interface instead of list
class MyStack {
    Queue<Integer> q1;
    Queue<Integer> q2;
    int top;
    public MyStack() {
        q1=new LinkedList<Integer>();
        q2=new LinkedList<Integer>();
    }
    
    public void push(int x) {
        q1.add(x);
        top=x;
    }
    
    public int pop() {
        while(q1.size()>1)
        {
            top=q1.remove();
            q2.add(top);
        }
        int y=q1.peek();
        q1.remove();
        Queue<Integer>temp=q1;
        q1=q2;
        q2=temp;
        return y;
    }
    
    public int top() {
        return top;
    }
    
    public boolean empty() {
        if(q1.isEmpty()) {
            return true;
        }
        return false;
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------
#using only one queue...optimised approach
class MyStack {
    private LinkedList<Integer> q1;
    public MyStack() {
        q1=new LinkedList<>();
    }
    
    public void push(int x) {
        q1.add(x);
        for(int i=0;i<q1.size()-1;i++)
        {
            q1.add(q1.peek());
            q1.remove();
        }
    }
    
    public int pop() {
        return q1.remove();
    }
    
    public int top() {
        return q1.peek();
    }
    
    public boolean empty() {
        return q1.isEmpty();
    }
}
