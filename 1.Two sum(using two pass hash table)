class Solution 
{
    public int[] twoSum(int[] nums, int target)
    {
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) 
        {
            map.put(nums[i], i);
        }
        for (int i = 0; i < nums.length; i++)
        {
            int complement = target - nums[i];
            if (map.containsKey(complement) && map.get(complement) != i) 
            {
                return new int[] { i, map.get(complement) };
            }
        }
        return null;
    }
}

Time complexity:O(n)
We traverse the list containing n elements exactly twice. Since the hash table reduces the lookup time to O(1), the overall time complexity is O(n).
Space complexity:O(n)
The extra space required depends on the number of items stored in the hash table, which stores exactly n elements.
