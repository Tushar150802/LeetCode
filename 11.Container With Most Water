#Solution with time complexity O(n^2)

class Solution 
{
    public int maxArea(int[] height) 
    {
        int res=0,area=0;
        for(int i=0;i<height.length;i++)
        {
            for(int j=i+1;j<height.length;j++)
            {
                area=(j-i)*(Math.min(height[i],height[j]));
                res=Math.max(area,res);
            }
        }
        return res;
    }
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Better Solution

class Solution
{
    public int maxArea(int[] height)
    {
        int a=0,b=height.length-1;
        int area=0;
        while(a<b)
        {
            if(height[a]<height[b])
            {
                area=Math.max((b-a)*height[a],area);
                a+=1;
            }
            else
            {
                area=Math.max((b-a)*height[b],area);
                b-=1;
            }
        }
        return area;
    }
}

Time:O(n) Single Pass
Space:O(n)
