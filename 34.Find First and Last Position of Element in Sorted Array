class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] res=new int[2];
        res[0]=first(nums,target);
        res[1]=second(nums,target);
        return res;
    }
    public int first(int[] nums,int target)
    {
        int index=-1;
        int low=0;
        int high=nums.length-1;
        while(low<=high)
        {
        int mid=low+(high-low)/2;
        if(nums[mid]>=target)
        {
            high=mid-1;
        }
        else
        {
            low=mid+1;
        }
        if(nums[mid]==target)
        index=mid;
        }
        return index;
    }
    public int second(int[] nums,int target)
    {
        int index=-1;
        int low=0;
        int high=nums.length-1;
        while(low<=high)
        {
        int mid=low+(high-low)/2;
        if(nums[mid]<=target)
        {
            low=mid+1;
        }
        else
        {
            high=mid-1;
        }
        if(nums[mid]==target)
        index=mid;
        }
        return index;
    }
}


Time Complexity:O(log n)
