class Solution 
{
    public int removeElement(int[] nums, int val)
    {
        int insertIndex=0;
        for(int i=0;i<nums.length;i++)
        {
            if(nums[i]!=val)
            {
            nums[insertIndex]=nums[i];
            insertIndex++;
            }
        }
        return insertIndex;
    }
}


Time : O(n)
Space : O(1)
 -------------------------------------------------------------------------
 #Efficient code ...just swap the value of val with the last element of the array and reduce the size of it by 1
 
 public int removeElement(int[] nums, int val)
 {
    int i = 0;
    int n = nums.length;
    while (i < n) 
    {
        if (nums[i] == val) 
        {
            nums[i] = nums[n - 1];                                             
            // reduce array size by one
            n--;
        } else 
        {
            i++;
        }
    }
    return n;
}

Time : O(n)
Space : O(1)        

Both i and n traverse at most n steps. 
In this approach, the number of assignment operations is equal to the number of elements to remove. 
So it is more efficient if elements to remove are rare
