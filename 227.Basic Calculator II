class Solution {
    public int calculate(String s) {
        Stack<Integer> stack=new Stack<>();
        int currentNumber=0;
        char operation='+';
        for(int i=0;i<s.length();i++)
        {
            char currentChar=s.charAt(i);
            if(Character.isDigit(currentChar))
            {
                currentNumber=(currentNumber*10)+(currentChar-'0');
            }
            if(!Character.isDigit(currentChar)&&!Character.isWhitespace(currentChar)||i==s.length()-1)
            {
                if(operation=='-')
                {
                    stack.push(-currentNumber);
                }
                else if(operation=='+')
                {
                    stack.push(currentNumber);
                }
                else if(operation=='*')
                {
                    stack.push(stack.pop()*currentNumber);
                }
                else if(operation=='/')
                {
                    stack.push(stack.pop()/currentNumber);
                }
                operation=currentChar;
                currentNumber=0;
            }
        }
        int res=0;
        while(!stack.isEmpty())
        {
            res+=stack.pop();
        }
        return res;
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------
#optimized soln without using stack
class Solution {
    public int calculate(String s) {
        int currentNumber = 0, lastNumber = 0, result = 0;
        char operation = '+';
        for (int i = 0; i < s.length(); i++) {
            char currentChar = s.charAt(i);
            if (Character.isDigit(currentChar)) {
                currentNumber = (currentNumber * 10) + (currentChar - '0');
            }
            if (!Character.isDigit(currentChar) && !Character.isWhitespace(currentChar) || i == s.length() - 1) {
                if (operation == '+' || operation == '-') {
                    result += lastNumber;
                    lastNumber = (operation == '+') ? currentNumber : -currentNumber;
                } else if (operation == '*') {
                    lastNumber = lastNumber * currentNumber;
                } else if (operation == '/') {
                    lastNumber = lastNumber / currentNumber;
                }
                operation = currentChar;
                currentNumber = 0;
            }
        }
        result += lastNumber;
        return result;
    }
}
