#using 2 stacks/push O(n)/pop O(1)
class MyQueue {
    private Stack<Integer> s1;
    private Stack<Integer> s2;
    int front;
    public MyQueue() {
        s1=new Stack<>();
        s2=new Stack<>();
    }
    
    public void push(int x) {
        while(!s1.isEmpty())
            s2.push(s1.pop());
        s2.push(x);
        while(!s2.isEmpty())
            s1.push(s2.pop());
    }
    
    public int pop() {
        return s1.pop();
    }
    
    public int peek() {
        return s1.peek();
    }
    
    public boolean empty() {
        return s1.isEmpty();
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------
#amortized analysis
class MyQueue {
    private Stack<Integer> s1;
    private Stack<Integer> s2;
    int front;
    public MyQueue() {
        s1=new Stack<>();
        s2=new Stack<>();
    }
    
    public void push(int x) {
        if(s1.isEmpty())
            front=x;
        s1.push(x);
    }
    
    public int pop() {
        if(s2.isEmpty())
        {
            while(!s1.isEmpty())
                s2.push(s1.pop());
        }
        return s2.pop();
    }
    
    public int peek() {
        if(!s2.isEmpty()) return s2.peek();
        return front;
    }
    
    public boolean empty() {
     return s1.isEmpty() && s2.isEmpty();   
    }
}
