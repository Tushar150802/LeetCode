class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
    preOrder(root);
    return res;        
    }
    private List<Integer> res=new ArrayList<>();
    private void preOrder(TreeNode node)
    {
        if(node==null){
            return;
        }
        res.add(node.val);
        preOrder(node.left);
        preOrder(node.right);
    }
}
---------------------------------------------------------Iterative method----------------------// Note that we add currNode's right child to the stack first
class Solution {    
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> answer = new ArrayList<>();
        Stack<TreeNode> stack = new Stack<>();
        stack.add(root);

        while (!stack.isEmpty()) {
            TreeNode currNode = stack.peek();
            stack.pop();
            if (currNode != null) {
                answer.add(currNode.val);
                stack.add(currNode.right);
                stack.add(currNode.left);
            }
        }
        return answer;
    }
}
