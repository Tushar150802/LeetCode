class Solution {
    public boolean detectCapitalUse(String word) {
        int n=word.length();
        if(n==1) return true;

        if(Character.isUpperCase(word.charAt(0)))
        {
            if(Character.isUpperCase(word.charAt(1)))
            {
                for(int i=2;i<n;i++)
                {
                    if(!Character.isUpperCase(word.charAt(i)))
                    return false;
                }
                return true;
            }
            else
            {
                for(int i=1;i<n;i++)
                {
                    if(!Character.isLowerCase(word.charAt(i)))
                    return false;
                }
                return true;
            }
        }
        else
        {
        for(int i=1;i<n;i++)
                {
                    if(!Character.isLowerCase(word.charAt(i)))
                    return false;
                }
                return true;
        }
    }
}
-----------------------------------------------------------------------------------------------
Using Regex
Regular Expression
class Solution {
    public boolean detectCapitalUse(String word) {
        return word.matches("[A-Z]*|.[a-z]*");
    }
}
Time complexity: Basically O(n), but depends on implementation.Time complexity can vary from O(1) to O(2^n).
Space complexity : O(1). We only need constant spaces to store our pattern.
